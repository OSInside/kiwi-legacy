#!/bin/bash
#================
# FILE          : preinit
#----------------
# PROJECT       : OpenSuSE KIWI Image System
# COPYRIGHT     : (c) 2006 SUSE LINUX Products GmbH. All rights reserved
#               :
# AUTHOR        : Marcus Schaefer <ms@suse.de>
#               :
# BELONGS TO    : Operating System images
#               :
# DESCRIPTION   : This file is called after the image root
#               : has changed by the linuxrc script
#               :
# STATUS        : BETA
#----------------
#======================================
# Functions...
#--------------------------------------
. /include

#======================================
# 1) start error log
#--------------------------------------
errorLogStart
Echo "Calling pre-init stage in system image"

#======================================
# 2) check for LOCAL_BOOT
#--------------------------------------
if [ "$LOCAL_BOOT" = "yes" ] && [ -z "$KIWI_RECOVERY" ];then
	exit 0
fi

#======================================
# 3) start udev
#--------------------------------------
mountSystemFilesystems
udevSystemStart

#======================================
# 4) update mount table
#--------------------------------------
updateMTAB

#======================================
# 5) create framebuffer devices
#--------------------------------------
createFramebufferDevices

#======================================
# 6) check preinit services
#--------------------------------------
if isVirtioDevice;then
	runPreinitServices virtio
fi
if isDASDDevice;then
	runPreinitServices dasd
fi
if isZFCPDevice;then
	runPreinitServices zfcp
fi

#======================================
# 7) create initrd on diskful
#--------------------------------------
if \
	[ -z "$UNIONFS_CONFIG" ] && [ -z "$COMBINED_IMAGE" ] && \
	[ ! "$OEM_KIWI_INITRD" = "yes" ]
then
	#======================================
	# use distro initrd via mkinitrd
	#--------------------------------------
	setupSUSEInitrd
else
	#======================================
	# use kiwi initrd from RW partition
	#--------------------------------------
	bootLoaderOK=1
fi

#======================================
# 8) Install boot loader if ok
#--------------------------------------
if [ $bootLoaderOK = 1 ];then
	installBootLoader
fi

#======================================
# 9) copy recovery related files
#--------------------------------------
if [ "$LOCAL_BOOT" = "no" ] && [ ! -z "$OEM_RECOVERY" ];then
	IFS=$IFS_ORIG
	Echo "Setting up recovery configuration archive..."
	mkdir -p /reco-save
	if ! mount $imageRecoveryDevice /reco-save >/dev/null;then
		systemException "Failed to mount recovery device" "reboot"
	fi
	Echo "Installing boot loader into recovery partition"
	setupBootLoaderRecovery / /reco-save OEM
	installBootLoaderRecovery
	Echo "Store recovery boot files phase 1)..."
	backupBootFiles=""
	for i in \
		/etc/fstab \
		/etc/sysconfig/kernel \
		/etc/sysconfig/bootloader \
		/etc/grub.conf \
		/etc/lilo.conf \
		/etc/default/grub \
		/etc/grub.d/40_custom
	do
		test -e $i && backupBootFiles="$backupBootFiles $i"
	done
	if ! tar -czf /reco-save/boot-1.tgz $backupBootFiles;then
		systemException "Failed to tar up recovery boot-1.tgz" "reboot"
	fi
	Echo "Store recovery boot files phase 2)..."
	backupBootFiles=""
	for i in $(find /boot -type f); do
		if ! echo $i | grep -q -E "\.sys";then
			backupBootFiles="$backupBootFiles $i"
		fi
	done
	if ! tar -czf /reco-save/boot-2.tgz $backupBootFiles;then
		systemException "Failed to tar up recovery boot-2.tgz" "reboot"
	fi
	umount /reco-save
	rmdir /reco-save
fi

#======================================
# 10) create /etc/ImagePackages
#--------------------------------------
if [ "$LOCAL_BOOT" = "no" ];then
	if [ -x /bin/rpm ];then
		Echo "Creating initial image package info file"
		rpm -qa --last > /etc/ImagePackages
	fi
fi

#======================================
# 11) setup console
#--------------------------------------
setupConsole

#======================================
# 11.1) load network module
#--------------------------------------
if loadNetworkCardS390 "0.0.0191";then
	#======================================
	# 11.2) Setup network interface and DNS
	#--------------------------------------
	setupNetworkInterfaceS390
	udevPending
	setupNetworkStatic 1
	setupNetworkStatic 0
fi

#======================================
# 12) create origin snapshot if possible
#--------------------------------------
createOriginSnapshot

#======================================
# 13) Run user script
#--------------------------------------
runHook preCallInit

#======================================
# 14) kill udev
#--------------------------------------
udevSystemStop
umountSystemFilesystems
