The XML object provides access to the data in the config.xml file without
revealing the internal representation of the XML data.

The XML data is represented by a number of classes with names of the form
KIWIXML*Data (data classes). Data classes represent complex XML elements,
or elements and their children. A complex XML element is an element with
one or more attributes such that the element presents more than a simple
key value pair. All data classes are a child of the base data class
KIWIXMLDataBase that implements a number of private methods for argument
checking. Data classes implement getters and setters for individual values
and always return primitives or array refs thereof.

===
Design decisions:
A DataClass only returns primitives or array refs thereof

This implies that child relationships of elements are enforced at the XML
class level. For example the <type> element has a number of complex children
such as <ec2config> or <oemconfig>. Each of these complex children is
represented as it's own class, but these objects are not accessed from the
XMLTypeData object, but rather from the XML object.

+ This allows the XMLTypeData class to follow the design decision of only
  returning primitives (strings, int, etc.) or array refs thereof.
+ This also reduces the amount of XML structure leakage into the XML client
  code as the client is not aware of the child relationship between the
  <ec2config> or other children and the <type> data.
+ This reduces the length of calling chain constructs, such that chains
  as shown below
  XML->getType()->getEC2Config()->getAccountNumber()
  are avoided in the XML client code
+ Individual data classes are simpler in implementation and for testing
  purposes as they do not have to keep track of child objects
===

In principal every entry in an XML file can be reduced to a key-value pair.
For complex elements each attribute has a get method that returns the value
for the attribute. As mush as possible the attribute name is used in the
get method name to ensure an obvious relationship between the method name and
the attribute name documented in the Schema documentation. For lists in the
XML that present simple key value pairs the appropriate data class will
return an array ref of all the names for which data is available and the
client code can then choose the data it is interested in and ask for it by
name from the data class. This implementation hides the internal
implementation of the storage and processing of the XML options thus that the
client code cannot make any assumptions about the internal implementation.

The XML class is the proxy for client code to access any XML data. The XML
object may return objects or array refs of objects of KIWIXML*Data types or
it may return primitives or array refs thereof. The XML class manages child
relationships between complex elements as mentioned previously.

=== 
Design decisions:
The XML object may return objects or array refs of objects of KIWIXML*Data
types or it may return primitives or array refs thereof.

+ This implies that some of the structure of the XML Schema leaks into the
  client code. For example the client code has to know to ask for the
  XMLPreferencesData object to obtain information about RPM install settings
  or other data that is captured as a child of the <preferences> element.
+ This reduces the size of the interface of the XML class significantly.
  Incorporating getters and setters for each attribute in the XML class
  would create a huge XML interface.

The tradeoff here is rather obvious. We decided to leak a small amount of
XML structure information into the client code in order to limit the interface
size of the XML class.

+ This implies that movement of data from one XML*Data object into another
  XML*Data object requires changes to client code. Such code churn is
  generally not desirable. However, as the XML design is in reasonable shape
  data movements are expected to be small. Further, the relatively straight
  forward nature of the design and the extensive unit testing make changes of
  this nature relatively easy to cope with.
===

The internals of the XML class are hidden from the client code. In general the
internal data storage follows the designed XML schema model. The profile
data is the highest level concept in the schema and all profile dependent
data is stored in a hash ref keyed by the profile name. Data that is not
profile dependent is stored outside the profile hash ref. The data structure
that signifies the storage model of data is documented in the XML class
implementation and should be fairly straight forward to understand.

Key-points:
- Relation between methods and elements and attributes in the XML schema
  are obvious by name.
- The internal data storage structure of the XML class follows the concepts
  in the schema design
- The internal data structure and storage is completely hidden from the
  client code
- A small amount of XML structure is leaked to the client code
- The interface of the XML object is kep to a minimum
- A complete set of unit tests exists for the XML and the XML*Data classes
- Unit tests are easy to implement and monitor


