<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                         "http://www.docbook.org/xml/4.5/docbookx.dtd">

<chapter id="chap.caches">
	<title>Image Caches</title>
	<indexterm>
		<primary>KIWI</primary>
		<secondary>Caches</secondary>
	</indexterm>
  
	<sect1 id="sec.caches.introduction">
		<title>Introduction</title>
		<para>
			The process of creating an appliance could take quite some time
			and often the same software is installed over and over again. In
			order to speed up that process kiwi is able to create and re-use
			so called image caches. An image cache in kiwi is an ext3 based
			filesystem image representing a pre-installed software bundle.
		</para>

		<figure id="fig.imagecachingarch">
			<title>Image Caching Architecture</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/cache.png"/><!-- width="50%" -->
				</imageobject>
			</mediaobject>
		</figure>

		<para>
			Before one can use a cache it needs to be created. A cache can be
			created from any standard kiwi image description. That means you can
			simply use one of the template descriptions and create a cache from
			it. But it might be more clever to create image descriptions for the
			purpose of caching. Such descriptions could represent a set of patterns
			for example. The less special a cache is the more often it can be re-used
		</para>
		<para>
			Once there are caches in the system kiwi selects the best match and
			mounts the cache in a way that all write actions (copy-on-write cache)
			are redirected to a cow file. That way the cache itself is never changed
			and can be re-used simultaniosly for other build processes. As result
			the build process doesn't start with an empty tree but with a tree
			almost complete. Only the missing parts are now installed and according
			to how much the cache already covered this process is done fastly
		</para>
	</sect1>

	<sect1 id="sec.caches.example">
		<title>Example</title>
		<para>
			Let's say we know that we want to build some images of type 'vmx'
			and based on the openSUSE 12.2 JeOS image description. In order to
			create image caches for the system and the boot image the following
			steps needs to be done:
		</para>
    <procedure>
      <step>
        <para>Copy the base image descriptions used in the build:</para>
        <screen><command>cp</command> -a /usr/share/kiwi/image/vmxboot/suse-12.2 /tmp/boot-cache
<command>cp</command> -a /usr/share/kiwi/image/suse-12.2-JeOS /tmp/image-cache</screen>
      </step>
      <step>
        <para>Modify boot-cache and image-cache
            <filename>config.xml</filename> files to add a btrfs type
          and size</para>
        <screen>&lt;type image="btrfs"&gt;
    &lt;size unit="G">5&lt;/size&gt;
&lt;/type&gt;</screen>
      </step>
      <step>
        <para>Modify boot-cache and image-cache to contain the package
          manager. This is required for the later use of the
          caches.</para>
        <screen>&lt;package name="zypper"/&gt;</screen>
      </step>
      <step>
        <para>Build the caches:</para>
        <screen><command>kiwi</command> --init-cache /tmp/image-cache
<command>kiwi</command> --init-cache /tmp/boot-cache</screen>
      </step>
    </procedure>
		<para> By default those caches will be created in
        <filename>/var/cache/kiwi/image</filename>. To run a build which
      makes use of the cache the following command is used: </para>
			<screen><command>kiwi</command> --build suse-12.2-JeOS -d /tmp/myimage --type vmx \
     --cache /var/cache/kiwi/image</screen>
			<para>
			This call is about 50% faster compared to the creation without a
			cache. It's important to understand that a cache based build will
			create a root tree which contains only the cow file containing the
			differences compared to the used cache. So at any time you want
			to create an image out of it you have to make sure that the cache
			also exists
		</para>
	</sect1>
</chapter>
