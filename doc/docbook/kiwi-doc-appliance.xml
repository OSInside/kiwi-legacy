<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                         "http://www.docbook.org/xml/4.5/docbookx.dtd">

<chapter id="chap.appliance">
  <title>Creating Appliances with KIWI</title>

  <sect1 id="sec.appliance.overview">
    <title>Overview</title>
    <indexterm>
      <primary>KIWI</primary>
      <secondary>overview</secondary>
    </indexterm>
    <para>Traditionally, computing functions such as word processing or
      e-mail handling are delivered as software applications. These
      applications are targeted to run on a computer with an installed
      general purpose operating system. Applications often have a
      specialized installer that must be run by the consumer (whether home
      computer user or an administrator in an IT department of a company) to
      install the application on the computer in question. For installation
      of an application on multiple computers the installation program must
      often be run on each computer where the application is to be installed.
      In most cases a given application uses only a small part of the
      capabilities provided by the general purpose operating system running
      on a computer. Additionally if an application needs special settings
      to be applied to the general purpose operating system, these often
      have to be set by the consumer after the installation is complete.
      These settings are often documented in an installation guide that
      consumers may or may not read. Last but not least, running a general
      purpose operating system to support an application that only requires
      a small part of the functionality provided by the general purpose OS
      is a waste of computing resources.</para>

    <para>An appliance is the combination of the parts of a general
      purpose OS needed by a given application and the application itself,
      bundled and delivered as one unit. This unit may be delivered in
      a variety of formats, for example a ready to run virtual machine or
      a self installing system on optical media or a USB stick.</para>

    <para>Compared to the traditional model of application delivery the
      appliance model has a number of advantages. The consumer no longer
      has to install a general purpose OS and the application in separate
      steps. The application is part of the appliance and the appliance
      provider, as the application expert, takes care of the application
      "installation". Further, the appliance provider takes care of any
      OS tuning that may benefit the application. Last but not least, the
      reduced size of the OS does not only consume fewer resources than
      a full blow "regular" install of a general purpose OS, but it also
      provides a reduced footprint for potential security exposure. From the
      application providers point of view there may be an opportunity to
      drop the implementation and maintenance of a specialized installer
      as the application installation no longer has to be "consumer friendly".
      </para>

    <para>The traditional software delivery model certainly has it's place.
      However, for many purposes appliances present a more convenient
      mechanism for consumers.</para>
  </sect1>

  <sect1 id="sec.appliance.kiwi-model">
    <title>The KIWI Model</title>
    <indexterm>
      <primary>KIWI</primary>
      <secondary>model</secondary>
    </indexterm>
    <para> With KIWI we started to use a different model. Instead of
      installing firewall software on top of a general purpose
      computer/operating system, the designers/engineers built images
      that are designed specifically for the task. These are so called
      appliances. When building appliances with KIWI the following
      proceeding has proven to work reliably. Nevertheless the following
      is just a recommendation and can be adapted to special needs and
      environments. </para>

    <procedure id="proc.appliance.general-building">
      <step>
        <para>Choose an appropriate image description
          template from the provided KIWI examples. Add or adapt
          repositories, package names or both, according to the distribution
          you want to build an image for.</para>
      </step>
      <step>
        <para>Allow the image to create an in-place git repository to
          allow tracking of non-binary changes. This is done by adding
          the following line into your <command>config.sh</command> script:</para>
        <screen>baseSetupPlainTextGITRepository</screen>
      </step>
      <step>
        <para>Prepare the preliminary version of your new appliance by
          calling <command>kiwi</command>
          <option>--prepare</option>
        </para>
      </step>
      <step>
        <para>Decide for a testing environment. In my opinion a real
          hardware based test machine which allows to boot from USB is a
          good and fast approach.
        </para>
<screen>&lt;type image="iso" boot="isoboot/suse-..." flags="clic" hybrid="true"/&gt;</screen>
      </step>
      <step>
        <para>Create the preliminary live stick image of your new
          appliance by calling <command>kiwi</command>
          <option>--create</option>… After successful creation of the
          image files find an USB stick which is able to store your
          appliance and plug it into a free USB port on your image build
          machine. The deployment can be performed from any
          OS including Windows as long as a tool to dump data onto a disk
          device exists and is used.
        </para>
      </step>
      <step>
        <para>Plug in the stick on your test machine and boot it.
        </para>
      </step>
      <step>
        <para>After your test system has successfully booted from stick
          login into your appliance and start to tweak the system
          according to your needs. This includes all actions required to
          make the appliance work as you wish. Before you start take
          care for the following: </para>

        <itemizedlist>
          <listitem>
            <para>Create an initial package list. This can be done by
              calling: </para>
            <screen><command>rpm</command> -qa | <command>sort</command> &gt; /tmp/deployPackages</screen>
          </listitem>
          <listitem>
            <para>Check the output of the command <command>git</command> <option>status</option> and include
              everything which is unknown to git and surely will not be
              changed by you and will not become part of the image
              description overlay files to the <filename>/.gitignore</filename> files </para>
          </listitem>
        </itemizedlist>

        <para>After the initial package list exists and the git
          repository is clean you can start to configure the system. You
          never should install additional software just by installing an
          unmanaged archive or build and install from source. It’s very
          hard to find out what binary files had been installed and it’s
          also not architecture safe. If there is really no other way
          for the software to become part of the image you should
          address this issue directly in your image description and the
            <command>config.sh</command> script but not after the
          initial deployment has happened. </para>
      </step>
      <step>
        <para>As soon as your system works as expected your new
          appliance is ready to enter the final stage. At this point you
          have done several changes to the system but they are all
          tracked and should now become part of your image description.
          To include the changes into your image description the
          following process should be used: </para>

        <itemizedlist>
          <listitem>
            <para>Check the differences between the currently installed
              packages and the initial deployment list. This can be done
              by calling:</para>

            <screen><command>rpm</command> -qa | <command>sort</command> &gt; /tmp/appliancePackages
<command>diff</command> -u /tmp/deployPackages /tmp/appliancePackages</screen>

            <para>Add those packages which are labeled with (&plus;) to the
                <sgmltag class="starttag">packages
                type="image"</sgmltag> section of your config.xml file
              and remove those packages which has been removed (&minus;)
              appropriately. If there are packages which has been
              removed against the will of the package manager make sure
              you address the uninstallation of these packages in your
                <command>config.sh</command> script. If you have
              installed packages from repositories which are not part of
              your <filename>config.xml</filename> file you should also
              add these repositories in order to allow KIWI to install
              the packages </para>
          </listitem>

          <listitem>
            <para>Check the differences made in the configuration files.
              This can be easily done by calling: </para>
            <screen><command>git</command> diff >/tmp/appliancePatch</screen>
            <para>The created patch should become part of your image
              description and you should make sure the patch is applied
              when preparing the image. According to this the command: </para>
            <screen><command>patch</command> -p0 &lt; appliancePatch</screen>
            <para>needs to be added as part of your
                <command>config.sh</command> script. </para>
          </listitem>
          <listitem>
            <para>Check for new non binary files added. This can be done
              by calling: </para>
            <screen><command>git</command> status</screen>
            <para>All files not under version control so far will be
              listed by the command above. Check the contents of this
              list make sure to add all files which are not created
              automatically to become part of your image description. To
              do this simply clone (copy) these files with respect to
              the filesystem structure as overlay files in your image
              description <filename class="directory">root/</filename>
              directory. </para>
          </listitem>
        </itemizedlist>
      </step>
      <step>
        <para> All your valuable work is now stored in one image
          description and can be re-used in all KIWI supported image
          types. </para>
      </step>
    </procedure>

    <para>Congratulation! To make sure the appliance works as expected
      prepare a new image tree and create an image from the new tree. If
      you like you can deactivate the creation of the git repository
      which will save you some space on the filesystem. If this
      appliance is a server I recommend to leave the repository because
      it allows you to keep track of changes during the live time of
      this appliance. </para>

  </sect1>

  <sect1 id="sec.appliance.crossplatform">
    <title>Cross Platform Appliance Build</title>
    <indexterm>
      <primary>KIWI</primary>
      <secondary>cross-platform</secondary>
    </indexterm>
    <para>Building appliances for one processor architecture on another
      processor architecture is in general not possible with KIWI. The
      exception is that it is possible to build 32 bit (ix86) appliances on a
      64 bit system running on the x86-64 architecture. This cross-platform
      limitation is based on the requirement that KIWI be able to execute
      installed software inside the unpacked image tree. If the software
      installed inside the unpacked image tree does not run on the
      architecture of the build platform then KIWI cannot build the
      appliance.</para>

    <para>While KIWI has the <option>--target-arch</option> command line
      argument to instruct the package manager <emphasis>zypper</emphasis>
      to install packages for the specified architecture, this option
      is not intended to support cross-platform appliance builds.</para>
   </sect1>
</chapter>
