#!/usr/bin/perl
#================
# FILE          : devAPIdocGen.pl
#----------------
# PROJECT       : openSUSE Build-Service
# COPYRIGHT     : (c) 20013 SUSE LLC
#               :
# AUTHOR        : Robert Schweikert <rjschwei@suse.com>
#               :
# BELONGS TO    : Operating System images
#               :
# DESCRIPTION   : This code generates a set of web pages that document the
#               : modules used in kiwi. Each method is extracted from the
#               : source code and the comment marked by
#               : # ... and # --- is used as the documentation for the method.
#               :
#               : The code cross links the pages and tracks where methods
#               : are called.
#               :
# STATUS        : Development
#----------------

#==========================================
# Modules
#------------------------------------------
use strict;
use warnings;

use Carp;
use Data::Dumper;
use File::Slurp;
use File::Spec;
use gv;
use List::Util qw /first/;
use PPI;

my @allModules = glob '../modules/*.pm';

my %dependencyMap;
my %duplicteName;
my %infoTree;
my %kiwiMethodNames;
my %unresolvable;

#==========================================
# addMethodInfo
#------------------------------------------
sub addMethodInfo {
	# ...
	# Extract the method name and it's documentation delineated by
	# # ... and # ---.
	# ---
	my $modName = shift;
	my $content = shift;
	my $lineNo = 0;
	my $collectDoc;
	my $defOnLine;
	my $docEnd;
	my $inMethodContext;
	my $methodDoc = q{};
	my $methName;
	my $nothingCollected;
	my %classInfo;
#    print "DBG: working for: $modName\n";
	for my $ln (@{$content}) {
		$lineNo += 1;
		if ($ln =~ /^sub\s/mx) {
			my ($keyword, $name, $curly) = split /\s/mx, $ln;
#            print "\tDBG found sub: $name\n";
			if (! $curly) {
				chomp $name;
			}
			$methName = $name;
			if (! ($methName =~ /^new$|^instance$/mx)) {
#                print "\t\tDBG: not new or instance\n";
				if ($kiwiMethodNames{$methName}) {
					$duplicteName{$methName} = 1;
					$kiwiMethodNames{$methName} = 1;
				} else {
#                    print "\t\tDBG: add to method hash '$methName'\n";
					$kiwiMethodNames{$methName} = $modName;
				}
			}
			# Potential 1 line method
			if ($ln =~ /}/msx) {
#                print "\t\tDBG potential one liner\n";
				$ln =~ s/\s//gmx;
				my $curlyCnt = 0;
				my $tok = PPI::Tokenizer->new(\$ln);
				while ( my $t = $tok->get_token() ) {
					if ($t eq '{') {
						$curlyCnt += 1;
					}
					if ($t eq '}') {
						$curlyCnt -= 1;
					}
				}
				if ($curlyCnt == 0) {
					my $access;
					if ($methName =~ /^_|^__/mx) {
						$access = 'private';
					} else {
						$access = 'public';
					}
					$classInfo{$access}{$methName}{description} = 'Missing';
					$classInfo{$access}{$methName}{definedOn} = $lineNo;
					next;
				}
			}
			$inMethodContext = 1;
			$nothingCollected = 1;
			$defOnLine = $lineNo;
			$docEnd = 0;
			next;
		}
		my $access;
		if ($methName && $methName =~ /^_|^__/mx) {
			$access = 'private';
		} else {
			$access = 'public';
		}
		if ($inMethodContext && !$docEnd && $ln =~ /\#\s\.\.\./mx) {
#            print "\t\tDBG: collect begin; skip line\n";
			$collectDoc = 1;
			next;
		}
		if ($collectDoc && $ln =~ /\#\s---/mx) {
#            print "\t\tDBG: collect end\n";
			$classInfo{$access}{$methName}{description} = $methodDoc;
			$classInfo{$access}{$methName}{definedOn} = $defOnLine;
			$collectDoc = 0;
			$docEnd = 1;
			$methodDoc = q{};
			$methName = q{};
		}
		if ($collectDoc) {
#            print "\t\tDBG: collect: $ln\n";
			$nothingCollected = 0;
			$ln =~ s/\#//mx;
			$ln =~ s/\t//mx;
			$methodDoc .= $ln;
		}
		if ($inMethodContext && $nothingCollected && $ln =~ /^}/mx) {
#            print "\t\tDBG: method end no doc: $methName\n";
			$classInfo{$access}{$methName}{description} = 'Missing';
			$classInfo{$access}{$methName}{definedOn} = $defOnLine;
			$nothingCollected = 1;
			$inMethodContext = 0;
		}
	}
	$infoTree{$modName} = \%classInfo;
	return;
}

#==========================================
# addCtorCrossReferences
#------------------------------------------
sub addCtorCrossReferences {
	# ...
	# Add cross refernces to call origins for new() and instance() calls
	# ---
	my $modName = shift;
	my $content = shift;
	my $lineNo = 0;
	my $methName;
LINE:
	for my $ln (@{$content}) {
		$lineNo += 1;
		if ($ln =~ /^sub\s/mx) {
			my ($keyword, $name, $curly) = split /\s/mx, $ln;
			$methName = $name;
			next LINE;
		}
		if ($ln =~ /\snew\s|>new|\snew|instance/mx && $ln =~ /KIWI/) {
			$ln =~ s/\s//gmx;
			my $tok = PPI::Tokenizer->new(\$ln);
			my $kObj;
			while ( my $t = $tok->get_token() ) {
				if ($t =~ /^\#/msx) {
					next LINE;
				}
				if ($t =~ /^KIWI/mx) {
					$kObj = $t;
				}
			}
			if (! $kObj) {
				next LINE;
			}
			my $origin = $modName . ':' . $methName . ':' . $lineNo;
			if ($ln =~ /new/) {
				if ($infoTree{$kObj}{public}{new}{called}) {
					push @{$infoTree{$kObj}
								->{public}
								->{new}
								->{called}}, $origin;
				} else {
					my @orig = ($origin);
					$infoTree{$kObj}{public}{new}{called} = \@orig;
				}
			} else {
				if ($infoTree{$kObj}{public}{instance}) {
					if ($infoTree{$kObj}{public}{instance}{called}) {
						push @{$infoTree{$kObj}
									->{public}
									->{instance}
									->{called}}, , $origin;
					} else {
						my @orig = ($origin);
						$infoTree{$kObj}
							->{public}
							->{instance}
							->{called} = \@orig;
					}
				} else {
					my @orig = ($origin);
					my %callRef = ( called => \@orig);
					$infoTree{$kObj}{public}{instance} = \%callRef;
				}
			}
		}
	}
	return;
}

#==========================================
# addMethodCallCrossReferences
#------------------------------------------
sub addMethodCallCrossReferences {
	# ...
	# Generate cross references for all kiwi methods
	# ---
	my $modName = shift;
	my $content = shift;
	my $lineNo = 0;
	my $methName;
	my $nextMethName;
LINE:
	for my $ln (@{$content}) {
		$lineNo += 1;
		my $cln = $ln;
		$cln =~ s/\s//gmx;
		my $tok = PPI::Tokenizer->new(\$cln);
		while ( my $t = $tok->get_token() ) {
			if ($t =~ /^\#/mx) {
				next LINE;
			}
			if ($t =~ /^sub$/mx) {
				$nextMethName = 1;
			}
			if ($nextMethName) {
				$methName = $t;
				$nextMethName = 0;
				next LINE;
			}
			if ($kiwiMethodNames{$t}) {
				if ($duplicteName{$t}) {
					__disambiguateCall($content, $t, $modName, $lineNo);
				} else {
					__addLineCrossRef($t, $modName, $lineNo);
				}
			}
		}
	}
	return;
}

#==========================================
# generateDependencyData
#------------------------------------------
sub generateDependencyData {
	# ...
	# Create dependency entries for each module.
	# ---
	my $modName = shift;
	my $content = shift;
	my @dependencies;
	for my $ln (@{$content}) {
		$ln =~ s/\s//gmx;
		my $tok = PPI::Tokenizer->new(\$ln);
		my @tokens = @{$tok->all_tokens()};
		if ($tokens[0] && $tokens[0] =~ /^use|^require/mx) {
			for my $token (@tokens) {
				if ($token =~ /.*(KIWI\w+).*/mx) {
					push @dependencies, $1;
				}
			}
		}
	}
	$dependencyMap{$modName} = \@dependencies;
	return;
}

#==========================================
# generateDependencyGraph
#------------------------------------------
sub generateDependencyGraph {
	# ...
	# Create a DAG from the dependency data
	# ---
	if (! -d 'devDocs') {
		mkdir 'devDocs';
	}
	my $graph = gv::graph('KIWI Module Dependencies');
	gv::setv($graph, 'concentrate', 'true');
	my %nodeIDmap;
	# Add all the nodes
	for my $modName (keys %dependencyMap) {
		my $handleID = gv::node($graph, $modName);
		$nodeIDmap{$modName} = $handleID;
	}
	# Add the edges
	for my $modName (keys %dependencyMap) {
		my @dependencies = @{$dependencyMap{$modName}};
		my $headNd = $nodeIDmap{$modName};
		for my $depMod (@dependencies) {
			my $edge = gv::edge($nodeIDmap{$depMod}, $headNd);
			gv::setv($edge, 'arrowhead', 'open');
			gv::setv($edge, 'arrowsize', '2');
		}
	}
	gv::layout($graph, 'dot');
	gv::render($graph, 'svg', 'images/moduleDAG.svg');
	return;
}

#==========================================
# generateGraphPage
#------------------------------------------
sub generateGraphPage {
	# ...
	# Generate HTML to show the dependency graph
	# ---
	if (! -d 'images') {
		mkdir 'devDocs';
	}
	my $page = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 '
		. 'Transitional//EN">' . "\n"
		. '<meta http-equiv="Content-type" '
		. 'content="text/html;charset=UTF-8">' . "\n"
		. '<html>' . "\n"
		. '<head>' . "\n"
		. '<title>KIWI Module Dependencies</title>' . "\n"
		. '</head>' . "\n"
		. '<body text="#000000" bgcolor="#E8E8FF" link="#3333FF" '
		. 'vlink="#663366" alink="#FF0000">' . "\n"
		. '<center><h1>KIWI Module Dependencies</h1></center>' . "\n"
		. '<p>' . "\n"
		. '<img SRC="../images/moduleDAG.svg"/>';
	my $status = open( my $PAGE, '>', 'devDocs/graph.html');
	if (! $status) {
		croak('Could not open devDocs/graph.html');
	}
	print $PAGE $page;
	close $PAGE;
	return;
}

#==========================================
# generateIndexPage
#------------------------------------------
sub generateIndexPage {
	# ...
	# Generate HTML pages for the information in the tree.
	# ---
	if (! -d 'devDocs') {
		mkdir 'devDocs';
	}
	my $index = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 '
		. 'Transitional//EN">' . "\n"
		. '<meta http-equiv="Content-type" '
		. 'content="text/html;charset=UTF-8">' . "\n"
		. '<html>' . "\n"
		. '<head>' . "\n"
		. '<title>KIWI Module Index</title>' . "\n"
		. '</head>' . "\n"
		. '<body text="#000000" bgcolor="#E8E8FF" link="#3333FF" '
		. 'vlink="#663366" alink="#FF0000">' . "\n"
		. '<center><h1>KIWI Module Index</h1></center>' . "\n"
		. '<p>' . "\n"
		. '<hr>' . "\n"
		. '<a href="graph.html">Dependency Graph</a>' . "\n"
		. '<hr>' . "\n"
		. '<ul>' . "\n";
	my @modules = keys %infoTree;
	@modules = sort @modules;
	for my $mod (@modules) {
		$index .= '<li><a href="' . $mod . '.html">' . $mod . '</a></li>';
		$index .= "\n";
	}
	$index .= '</ul>' . "\n"
		. '<hr>' . "\n"
		. '<h2>Unresolvable call information</h2>' . "\n"
		. '<p>' . "\n"
		. '<ul>' . "\n";
	my @methods = keys %unresolvable;
	@methods = sort @methods;
	for my $meth (@methods) {
		$index .= '<li>' . $meth . '</li>' . "\n"
			. '<ul>' . "\n";
		for my $msg (@{$unresolvable{$meth}}) {
			$index .= '<li>' . $msg . '</li>' . "\n";
		}
		$index .= '</ul>' . "\n";
	}
	$index .= '</ul>' . "\n";

	my $status = open( my $INDEX, '>', 'devDocs/index.html');
	if (! $status) {
		croak('Could not open devDocs/index.html');
	}
	print $INDEX $index;
	close $INDEX;
	return;
}

sub generateModulePages {
	# ...
	# Generate a page for each module
	# ---
	for my $mod (keys %infoTree) {
		my $page = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 '
			. 'Transitional//EN">' . "\n"
			. '<meta http-equiv="Content-type" '
			. 'content="text/html;charset=UTF-8">' . "\n"
			. '<html>' . "\n"
			. '<head>' . "\n"
			. '<title>' . $mod . ' Info</title>' . "\n"
			. '</head>' . "\n"
			. '<body text="#000000" bgcolor="#E8E8FF" link="#3333FF" '
			. 'vlink="#663366" alink="#FF0000">' . "\n"
			. '<center><h1>' . $mod . ' Info</h1></center>' . "\n"
			. '<p>' . "\n"
			. '<hr>' . "\n"
			. '<a name="TOP"></a>' . "\n"
			. '<h2>Public methods</h2>' . "\n"
			. '<p>' . "\n"
			. '<ul>' . "\n";
		my @methodsPub = keys %{$infoTree{$mod}{public}};
		@methodsPub = sort @methodsPub;
		for my $meth (@methodsPub) {
			$page .= '<li><a href="#' . $meth . '">' . $meth . '</a></li>'
				. "\n";
		}
		$page .= '</ul>' . "\n";
		my @methodsPriv;
		if ($infoTree{$mod}{private}) {
			@methodsPriv = keys %{$infoTree{$mod}{private}};
			@methodsPriv = sort @methodsPriv;
			$page .= '<h2>Private methods</h2>' . "\n"
				. '<p>' . "\n"
				. '<ul>' . "\n";
			for my $meth (@methodsPriv) {
				$page .= '<li><a href="#' . $meth . '">' . $meth . '</a></li>'
					. "\n";
			}
			$page .= '</ul>' . "\n";
		}
		$page .= '<hr>' . "\n";
		my %accessData = (
			public => \@methodsPub,
			private => \@methodsPriv
		);
		for my $access (keys %accessData) {
			for my $meth (@{$accessData{$access}}) {
				$page .= '<a name="' . $meth . '"><h2>' . $meth . '</h2></a>'
					. "\n"
					. '<p>' . "\n";
				my $doc = $infoTree{$mod}{$access}{$meth}{description};
				if (! $doc) {
					$doc = 'Missing documentation';
				}
				$page .= $doc
					. '<p>' . "\n"
					. 'Defined on line: ';
				my $lineNo = $infoTree{$mod}{$access}{$meth}{definedOn};
				if (! $lineNo) {
					$lineNo = 'Unknown';
				}
				$page .= $lineNo . "\n";
				if ($infoTree{$mod}{$access}{$meth}{called}) {
					my @calls = @{$infoTree{$mod}{$access}{$meth}{called}};
					$page .= '<p>' . "\n"
						. 'Called in' . "\n"
						. '<ul>' . "\n";
					for my $call (@calls) {
						my ($name, $methName, $lineNum) = split /:/msx, $call;
						$page .= '<li><a href="' . $name . '.html">' . $name
							. '</a> : ' . $lineNum . '</li>';
					}
					$page .= '</ul>' . "\n";
				}
			}
		}
		my $status = open( my $PAGE, '>', "devDocs/$mod.html");
		if (! $status) {
			croak("Could not open devDocs/$mod.html");
		}
		print $PAGE $page;
		close $PAGE;
	}
	return;
}

#==========================================
# __addLineCrossRef
#------------------------------------------
sub __addLineCrossRef {
	# ...
	# Add a cross reference to given line number for the given called
	# kiwi method.
	# ---
	my $kiwiMethodName = shift;
	my $moduleName     = shift;
	my $lineNo         = shift;
	my $useObj         = shift;
	if ($duplicteName{$kiwiMethodName} && ! $useObj) {
		print "Cannot disambiguate '$kiwiMethodName', use __disambiguateCall "
			. "method to add cross ref for this method.\n";
		return;
	}
	my $kObj;
	if ($useObj) {
		$kObj = $useObj;
	} else {
		$kObj = $kiwiMethodNames{$kiwiMethodName};
	}
	if (! $kObj) {
		print "No entry for kiwi method $kiwiMethodName\n";
		return;
	}
	my $origin = $moduleName . ':' . $kiwiMethodName . ':' . $lineNo;
	if (! $infoTree{$kObj}) {
		print "Could not add cross reference for '$kObj', called from "
			. "$origin; no entry.\n";
		return;
	}
	my $access;
	if ($kiwiMethodName =~ /^_|^__/mx) {
		$access = 'private';
	} else {
		$access = 'public';
	}
	if (! $infoTree{$kObj}{$access}{$kiwiMethodName}) {
		my $msg = "Could not add cross reference for '$kiwiMethodName' on "
			. "'$kObj', called from $origin; no entry.\n";
		if ($unresolvable{$kiwiMethodName}) {
			push @{$unresolvable{$kiwiMethodName}}, $msg;
		} else {
			my @msgs = ($msg);
			$unresolvable{$kiwiMethodName} = \@msgs
		}
		return;
	}
	if ($infoTree{$kObj}{$access}{$kiwiMethodName}{called}) {
		push @{$infoTree{$kObj}{$access}{$kiwiMethodName}{called}}, $origin;
	} else {
		my @orig = ($origin);
		$infoTree{$kObj}{$access}{$kiwiMethodName}{called} = \@orig;
	}
	return;
}

#==========================================
# __disambiguateCall
#------------------------------------------
sub __disambiguateCall {
	# ...
	# Figure out on which object the method was called.
	# ---
	my $content        = shift;
	my $kiwiMethodName = shift;
	my $modName        = shift;
	my $lineNo         = shift;
	my %perlSpecial = (
		BEGIN   => 1,
		DESTROY => 1
	);
	if ($perlSpecial{$kiwiMethodName}) {
		return;
	}
#    print "DBG: Need to disambiguate $kiwiMethodName : in: $modName\n";
	my @source = @{$content};
	my $ambigCallLn = $source[$lineNo-1];
	$ambigCallLn =~ s/\s//gmx;
	my $tok = PPI::Tokenizer->new(\$ambigCallLn);
	my @tokens = @{$tok->all_tokens()};
	my $methIdx = first { $tokens[$_] eq $kiwiMethodName } 0..$#tokens;
	my $callerVar = $tokens[$methIdx-2];
	my $tgtObj;
	if ($callerVar =~ /^\$/mx) {
		if ($callerVar eq '$this') {
#            print "\t\tDBG: trivial case for: $kiwiMethodName\n";
			$tgtObj = $modName;
		} else {
			$tgtObj = __getKClassName($content, $callerVar, $lineNo);
			if (! $tgtObj || $tgtObj eq '0') {
				my $msg = "Cannot disambiguate call to: $kiwiMethodName in "
					. "$modName at $lineNo\n";
				if ($unresolvable{$kiwiMethodName}) {
					push @{$unresolvable{$kiwiMethodName}}, $msg;
				} else {
					my @msgs = ($msg);
					$unresolvable{$kiwiMethodName} = \@msgs
				}
				return;
			}
		}
		__addLineCrossRef($kiwiMethodName, $modName, $lineNo, $tgtObj);
		return;
	}
	return;
}

#==========================================
# __getKClassName
#------------------------------------------
sub __getKClassName {
	# ...
	# Find a KIWI class name that maps to the given variable used to a
	# method.
	# ---
	my $content = shift;
	my $objRef  = shift;
	my $lineNo  = shift;
	my @source = @{$content};
	my $search = quotemeta $objRef;
#    print "\t\t\tDBG: work backwards from: $lineNo: looking for: '$objRef'\n";
	while ($lineNo > 0) {
		$lineNo -= 1;
		my $ln = $source[$lineNo];
#        print "\t\t\tDBG: working for: $ln\n";
		if ($ln =~ /$search\s*=/mx) {
#            print "\t\t\tDBG: found assignment\n";
			my $useNextAsRval;
			my $rval;
			$ln =~ s/\s//gmx;
			my $tok = PPI::Tokenizer->new(\$ln);
			while ( my $t = $tok->get_token() ) {
				if ($useNextAsRval) {
					$rval = $t;
#                    print "\t\t\tDBG: found rval: $rval :  objRef: $objRef\n";
					$useNextAsRval = 0;
				}
				if ($t eq '=') {
					$useNextAsRval = 1;
				}
			}
			if ($rval =~ /KIWI/) {
				return $rval;
			} elsif ($rval eq 'shift') {
				return '0';
			} else {
				return __getKClassName($content, $rval, $lineNo);
			}
		}
	}
	return;
}

#==========================================
# processFiles
#------------------------------------------
sub processFiles {
	# ...
	# Process all the modules
	# ---
	my @procOrder = (
		\&addMethodInfo,
		\&addCtorCrossReferences,
		\&addMethodCallCrossReferences,
		\&generateDependencyData
	);
	for my $func (@procOrder) {
		for my $flpath (@allModules) {
			my ($vol, $dir, $fname) =  File::Spec->splitpath( $flpath );
			my ($name, $ext) = split /\./msx, $fname;
			my @lines = read_file($flpath);
			&{$func}($name, \@lines);
		}
	}
	return;
}

processFiles();
generateDependencyGraph();
generateGraphPage();
generateIndexPage();
generateModulePages();


#$Data::Dumper::Terse  = 1;
#$Data::Dumper::Indent = 1;
#$Data::Dumper::Useqq  = 1;
#my $dd = Data::Dumper->new([ %infoTree ]);
#my $cd = $dd->Dump();
#print "DBG catalog:\n";
#print STDOUT $cd;
#print "DBG dependencies:\n";
#$dd = Data::Dumper->new([ %dependencyMap ]);
#$cd = $dd->Dump();
#print STDOUT $cd;
